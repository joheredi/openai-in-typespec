// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

export interface FNCallOutput {
  /** The name of the function to call. */
  name: string;
  /**
   * The arguments to call the function with, as generated by the model in JSON format. Note that
   * the model does not always generate valid JSON, and may hallucinate parameters not defined by
   * your function schema. Validate the arguments in your code before calling your function.
   */
  arguments: string;
}

/** Represents a chat completion response returned by model, based on the provided input. */
export interface CreateChatCompletionResponseOutput {
  /** A unique identifier for the chat completion. */
  id: string;
  /** The object type, which is always `chat.completion`. */
  object: string;
  /** The Unix timestamp (in seconds) of when the chat completion was created. */
  created: number;
  /** The model used for the chat completion. */
  model: string;
  /** A list of chat completion choices. Can be more than one if `n` is greater than 1. */
  choices: Array<Choices1Output>;
  usage?: CompletionUsageOutput;
}

export interface Choices1Output {
  /** The index of the choice in the list of choices. */
  index: number;
  message: ChatCompletionResponseMessageOutput;
  /**
   * The reason the model stopped generating tokens. This will be `stop` if the model hit a
   * natural stop point or a provided stop sequence, `length` if the maximum number of tokens
   * specified in the request was reached, or `function_call` if the model called a function.
   */
  finish_reason: "stop" | "length" | "function_call";
}

export interface ChatCompletionResponseMessageOutput {
  /** The role of the author of this message. */
  role: "system" | "user" | "assistant" | "function";
  /** The contents of the message. */
  content: string | null;
  /** The name and arguments of a function that should be called, as generated by the model. */
  function_call?: FNCallOutput;
}

/** Usage statistics for the completion request. */
export interface CompletionUsageOutput {
  /** Number of tokens in the prompt. */
  prompt_tokens: number;
  /** Number of tokens in the generated completion */
  completion_tokens: number;
  /** Total number of tokens used in the request (prompt + completion). */
  total_tokens: number;
}

export interface ErrorResponseOutput {
  error: ErrorModelOutput;
}

export interface CreateTranscriptionResponseOutput {
  text: string;
}

export interface CreateTranslationResponseOutput {
  text: string;
}

export interface HyperParamsOutput {
  /**
   * The number of epochs to train the model for. An epoch refers to one full cycle through the
   * training dataset.
   *
   * "Auto" decides the optimal number of epochs based on the size of the dataset. If setting the
   * number manually, we support any number between 1 and 50 epochs.
   */
  n_epochs?: "auto";
}

export interface FineTuningJobOutput {
  /** The object identifier, which can be referenced in the API endpoints. */
  id: string;
  /** The object type, which is always "fine_tuning.job". */
  object: "fine_tuning.job";
  /** The Unix timestamp (in seconds) for when the fine-tuning job was created. */
  created_at: number;
  /** The Unix timestamp (in seconds) for when the fine-tuning job was finished. */
  finished_at: number;
  /** The base model that is being fine-tuned. */
  model: string;
  /** The name of the fine-tuned model that is being created. */
  fine_tuned_model: string | null;
  /** The organization that owns the fine-tuning job. */
  organization_id: string;
  /**
   * The current status of the fine-tuning job, which can be either `created`, `pending`, `running`,
   * `succeeded`, `failed`, or `cancelled`.
   */
  status:
    | "created"
    | "pending"
    | "running"
    | "succeeded"
    | "failed"
    | "cancelled";
  /**
   * The hyperparameters used for the fine-tuning job. See the
   * [fine-tuning guide](/docs/guides/fine-tuning) for more details.
   */
  hyperparameters: HyperParamsOutput;
  /** The file ID used for training. */
  training_file: string;
  /** The file ID used for validation. */
  validation_file: string | null;
  /** The compiled results files for the fine-tuning job. */
  result_files: Array<OpenAIFileOutput>;
  /** The total number of billable tokens processed by this fine tuning job. */
  trained_tokens: number;
}

/** The `File` object represents a document that has been uploaded to OpenAI. */
export interface OpenAIFileOutput {
  /** The file identifier, which can be referenced in the API endpoints. */
  id: string;
  /** The object type, which is always "file". */
  object: "file";
  /** The size of the file in bytes. */
  bytes: number;
  /** The Unix timestamp (in seconds) for when the file was created. */
  createdAt: number;
  /** The name of the file. */
  filename: string;
  /** The intended purpose of the file. Currently, only "fine-tune" is supported. */
  purpose: string;
  /**
   * The current status of the file, which can be either `uploaded`, `processed`, `pending`,
   * `error`, `deleting` or `deleted`.
   */
  status:
    | "uploaded"
    | "processed"
    | "pending"
    | "error"
    | "deleting"
    | "deleted";
  /**
   * Additional details about the status of the file. If the file is in the `error` state, this will
   * include a message describing the error.
   */
  status_details?: string | null;
}

export interface ListPaginatedFineTuningJobsResponseOutput {
  object: string;
  data: Array<FineTuningJobOutput>;
  has_more: boolean;
}

export interface ListFineTuningJobEventsResponseOutput {
  object: string;
  data: Array<FineTuningJobEventOutput>;
}

export interface FineTuningJobEventOutput {
  object: string;
  created_at: number;
  level: "info" | "warn" | "error";
  message: string;
}

/**
 * Represents a completion response from the API. Note: both the streamed and non-streamed response
 * objects share the same shape (unlike the chat endpoint).
 */
export interface CreateCompletionResponseOutput {
  /** A unique identifier for the completion. */
  id: string;
  /** The object type, which is always `text_completion`. */
  object: string;
  /** The Unix timestamp (in seconds) of when the completion was created. */
  created: number;
  /** The model used for the completion. */
  model: string;
  /** The list of completion choices the model generated for the input. */
  choices: Array<Choices2Output>;
  usage?: CompletionUsageOutput;
}

export interface Choices2Output {
  index: number;
  text: string;
  logprobs?: LogProbs2Output;
  /**
   * The reason the model stopped generating tokens. This will be `stop` if the model hit a
   * natural stop point or a provided stop sequence, or `length` if the maximum number of tokens
   * specified in the request was reached.
   */
  finish_reason: "stop" | "length";
}

export interface LogProbs2Output {
  tokens: string[];
  token_logprobs: number[];
  top_logprobs: Record<string, number>[];
  text_offset: number[];
}

export interface CreateEditResponseOutput {
  /** The object type, which is always `edit`. */
  object: "edit";
  /** The Unix timestamp (in seconds) of when the edit was created. */
  created: number;
  /** description: A list of edit choices. Can be more than one if `n` is greater than 1. */
  choices: Array<Choices2Output>;
  usage: CompletionUsageOutput;
}

export interface ImagesResponseOutput {
  created: number;
  data: Array<ImageOutput>;
}

/** Represents the url or the content of an image generated by the OpenAI API. */
export interface ImageOutput {
  /** The URL of the generated image, if `response_format` is `url` (default). */
  url?: string;
  /** The base64-encoded JSON of the generated image, if `response_format` is `b64_json`. */
  b64_json?: string;
}

export interface CreateEmbeddingResponseOutput {
  /** The object type, which is always "embedding". */
  object: "embedding";
  /** The name of the model used to generate the embedding. */
  model: string;
  /** The list of embeddings generated by the model. */
  data: Array<EmbeddingOutput>;
  /** The usage information for the request. */
  usage: UsageOutput;
}

/** Represents an embedding vector returned by embedding endpoint. */
export interface EmbeddingOutput {
  /** The index of the embedding in the list of embeddings. */
  index: number;
  /** The object type, which is always "embedding". */
  object: "embedding";
  /**
   * The embedding vector, which is a list of floats. The length of vector depends on the model as\
   * listed in the [embedding guide](/docs/guides/embeddings).
   */
  embedding: number[];
}

export interface UsageOutput {
  /** The number of tokens used by the prompt. */
  prompt_tokens: number;
  /** The total number of tokens used by the request. */
  total_tokens: number;
}

export interface ListFilesResponseOutput {
  object: string;
  data: Array<OpenAIFileOutput>;
}

export interface DeleteFileResponseOutput {
  id: string;
  object: string;
  deleted: boolean;
}

/** The `FineTune` object represents a legacy fine-tune job that has been created through the API. */
export interface FineTuneOutput {
  /** The object identifier, which can be referenced in the API endpoints. */
  id: string;
  /** The object type, which is always "fine-tune". */
  object: "fine-tune";
  /** The Unix timestamp (in seconds) for when the fine-tuning job was created. */
  created_at: number;
  /** The Unix timestamp (in seconds) for when the fine-tuning job was last updated. */
  updated_at: number;
  /** The base model that is being fine-tuned. */
  model: string;
  /** The name of the fine-tuned model that is being created. */
  fine_tuned_model: string | null;
  /** The organization that owns the fine-tuning job. */
  organization_id: string;
  /**
   * The current status of the fine-tuning job, which can be either `created`, `running`,
   * `succeeded`, `failed`, or `cancelled`.
   */
  status: "created" | "running" | "succeeded" | "failed" | "cancelled";
  /**
   * The hyperparameters used for the fine-tuning job. See the
   * [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details.
   */
  hyperparams: HyperParams2Output;
  /** The list of files used for training. */
  training_files: Array<OpenAIFileOutput>;
  /** The list of files used for validation. */
  validation_files: Array<OpenAIFileOutput>;
  /** The compiled results files for the fine-tuning job. */
  result_files: Array<OpenAIFileOutput>;
  /** The list of events that have been observed in the lifecycle of the FineTune job. */
  events?: Array<FineTuneEventOutput>;
}

export interface HyperParams2Output {
  /**
   * The number of epochs to train the model for. An epoch refers to one full cycle through the
   * training dataset.
   */
  n_epochs: number;
  /**
   * The batch size to use for training. The batch size is the number of training examples used to
   * train a single forward and backward pass.
   */
  batch_size: number;
  /** The weight to use for loss on the prompt tokens. */
  prompt_loss_weight: number;
  /** The learning rate multiplier to use for training. */
  learning_rate_multiplier: number;
  /** The classification metrics to compute using the validation dataset at the end of every epoch. */
  compute_classification_metrics?: boolean;
  /** The positive class to use for computing classification metrics. */
  classification_positive_class?: string;
  /** The number of classes to use for computing classification metrics. */
  classification_n_classes?: number;
}

export interface FineTuneEventOutput {
  object: string;
  created_at: number;
  level: string;
  message: string;
}

export interface ListFineTunesResponseOutput {
  object: string;
  data: Array<FineTuneOutput>;
}

export interface ListFineTuneEventsResponseOutput {
  object: string;
  data: Array<FineTuneEventOutput>;
}

export interface ListModelsResponseOutput {
  object: string;
  data: Array<ModelOutput>;
}

/** Describes an OpenAI model offering that can be used with the API. */
export interface ModelOutput {
  /** The model identifier, which can be referenced in the API endpoints. */
  id: string;
  /** The object type, which is always "model". */
  object: "model";
  /** The Unix timestamp (in seconds) when the model was created. */
  created: number;
  /** The organization that owns the model. */
  owned_by: string;
}

export interface DeleteModelResponseOutput {
  id: string;
  object: string;
  deleted: boolean;
}

export interface CreateModerationResponseOutput {
  /** The unique identifier for the moderation request. */
  id: string;
  /** The model used to generate the moderation results. */
  model: string;
  /** A list of moderation objects. */
  results: Array<Results1Output>;
}

export interface Results1Output {
  /** Whether the content violates [OpenAI's usage policies](/policies/usage-policies). */
  flagged: boolean;
  /** A list of the categories, and whether they are flagged or not. */
  categories: Categories1Output;
  /** A list of the categories along with their scores as predicted by model. */
  category_scores: CategoryScoresOutput;
}

export interface Categories1Output {
  /**
   * Content that expresses, incites, or promotes hate based on race, gender, ethnicity,
   * religion, nationality, sexual orientation, disability status, or caste. Hateful content
   * aimed at non-protected groups (e.g., chess players) is harrassment.
   */
  hate: boolean;
  /**
   * Hateful content that also includes violence or serious harm towards the targeted group
   * based on race, gender, ethnicity, religion, nationality, sexual orientation, disability
   * status, or caste.
   */
  "hate/threatening": boolean;
  /** Content that expresses, incites, or promotes harassing language towards any target. */
  harassment: boolean;
  /** Harassment content that also includes violence or serious harm towards any target. */
  "harassment/threatening": boolean;
  /**
   * Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting,
   * and eating disorders.
   */
  "self-harm": boolean;
  /**
   * Content where the speaker expresses that they are engaging or intend to engage in acts of
   * self-harm, such as suicide, cutting, and eating disorders.
   */
  "self-harm/intent": boolean;
  /**
   * Content that encourages performing acts of self-harm, such as suicide, cutting, and eating
   * disorders, or that gives instructions or advice on how to commit such acts.
   */
  "self-harm/instructive": boolean;
  /**
   * Content meant to arouse sexual excitement, such as the description of sexual activity, or
   * that promotes sexual services (excluding sex education and wellness).
   */
  sexual: boolean;
  /** Sexual content that includes an individual who is under 18 years old. */
  "sexual/minors": boolean;
  /** Content that depicts death, violence, or physical injury. */
  violence: boolean;
  /** Content that depicts death, violence, or physical injury in graphic detail. */
  "violence/graphic": boolean;
}

export interface CategoryScoresOutput {
  /** The score for the category 'hate'. */
  hate: number;
  /** The score for the category 'hate/threatening'. */
  "hate/threatening": number;
  /** The score for the category 'harassment'. */
  harassment: number;
  /** The score for the category 'harassment/threatening'. */
  "harassment/threatening": number;
  /** The score for the category 'self-harm'. */
  "self-harm": number;
  /** The score for the category 'self-harm/intent'. */
  "self-harm/intent": number;
  /** The score for the category 'self-harm/instructive'. */
  "self-harm/instructive": number;
  /** The score for the category 'sexual'. */
  sexual: number;
  /** The score for the category 'sexual/minors'. */
  "sexual/minors": number;
  /** The score for the category 'violence'. */
  violence: number;
  /** The score for the category 'violence/graphic'. */
  "violence/graphic": number;
}
