// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace OpenAI.Internal.Models
{
    /// <summary> The VectorStoreExpirationAfter_anchor. </summary>
    internal readonly partial struct VectorStoreExpirationAfterAnchor : IEquatable<VectorStoreExpirationAfterAnchor>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VectorStoreExpirationAfterAnchor"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VectorStoreExpirationAfterAnchor(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LastActiveAtValue = "last_active_at";

        /// <summary> last_active_at. </summary>
        public static VectorStoreExpirationAfterAnchor LastActiveAt { get; } = new VectorStoreExpirationAfterAnchor(LastActiveAtValue);
        /// <summary> Determines if two <see cref="VectorStoreExpirationAfterAnchor"/> values are the same. </summary>
        public static bool operator ==(VectorStoreExpirationAfterAnchor left, VectorStoreExpirationAfterAnchor right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VectorStoreExpirationAfterAnchor"/> values are not the same. </summary>
        public static bool operator !=(VectorStoreExpirationAfterAnchor left, VectorStoreExpirationAfterAnchor right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="VectorStoreExpirationAfterAnchor"/>. </summary>
        public static implicit operator VectorStoreExpirationAfterAnchor(string value) => new VectorStoreExpirationAfterAnchor(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VectorStoreExpirationAfterAnchor other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VectorStoreExpirationAfterAnchor other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
